import os
import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
import openai
from datetime import datetime, timedelta
import random

# --- –ù–ê–ß–ê–õ–û: –ò–º–ø–æ—Ä—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ ---
# pip install aiocache (–µ—Å–ª–∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è)
# from aiocache import cached, Cache
# cache = Cache(Cache.MEMORY)

# –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –±–µ–∑ Redis, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å (–¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ)
# –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Redis
request_times = {}
# --- –ö–û–ù–ï–¶: –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ---

# –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–¥–∞–≤–ª—è–µ–º httpx –ª–æ–≥–∏
logging.getLogger("httpx").setLevel(logging.WARNING)

# –ü–æ–¥–∞–≤–ª—è–µ–º PTBUserWarning –¥–ª—è per_message
import warnings
from telegram.warnings import PTBUserWarning
warnings.filterwarnings(action="ignore", message=r".*CallbackQueryHandler", category=PTBUserWarning)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∞–≥–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
CATEGORY, SUBCATEGORY, EMOJIS, NAME, GENERATE, FEEDBACK = range(6)

# --- –ù–ê–ß–ê–õ–û: –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π ---
# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
MAIN_CATEGORIES = {
    "toast": "ü•Ç –¢–æ—Å—Ç—ã",
    "birthday": "üéÇ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è",
    "professional": "üíº –†–∞–±–æ—á–∏–µ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ",
    "seasonal": "üéÑ –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ / —Å–µ–∑–æ–Ω–Ω—ã–µ",
    "personal": "‚ù§Ô∏è –õ–∏—á–Ω—ã–µ –ø–æ–≤–æ–¥—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
    "family": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º–µ–π–Ω—ã–µ",
    "donate": "‚òï –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç",
    "feedback": "‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",
}

# –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
SUBCATEGORIES = {
    "toast": {
        "toast_corporate": "–ù–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–µ",
        "toast_wedding": "–ù–∞ —Å–≤–∞–¥—å–±–µ",
        "toast_new_year": "–ù–∞ –ù–æ–≤—ã–π –≥–æ–¥",
        "toast_birthday": "–ù–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è",
        "toast_farewell": "–ü—Ä–æ—â–∞–ª—å–Ω—ã–π",
        "toast_cocktail": "–ö–æ–∫—Ç–µ–π–ª—å–Ω—ã–π —á–∞—Å",
        "toast_romantic": "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π",
        "toast_funny": "–° —é–º–æ—Ä–æ–º",
    },
    "birthday": {
        "bd_gen": "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ",
        "bd_friend": "–¥–ª—è –¥—Ä—É–∑–µ–π",
        "bd_relatives": "–¥–ª—è —Ä–æ–¥–Ω—ã—Ö",
        "bd_colleague": "–¥–ª—è –∫–æ–ª–ª–µ–≥",
        "bd_mother": "–¥–ª—è –º–∞–º—ã",
        "bd_father": "–¥–ª—è –ø–∞–ø—ã",
        "bd_grandmother": "–¥–ª—è –±–∞–±—É—à–∫–∏",
        "bd_grandfather": "–¥–ª—è –¥–µ–¥—É—à–∫–∏",
        "bd_sister": "–¥–ª—è —Å–µ—Å—Ç—Ä—ã",
        "bd_brother": "–¥–ª—è –±—Ä–∞—Ç–∞",
        "bd_child": "–¥–ª—è —Ä–µ–±—ë–Ω–∫–∞",
        "bd_girlfriend": "–¥–ª—è –¥–µ–≤—É—à–∫–∏",
        "bd_boyfriend": "–¥–ª—è –º–æ–ª–æ–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞",
    },
    "professional": {
        "defender_day": "–° –¥–Ω—ë–º –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞",
        "womens_day": "–° 8 –º–∞—Ä—Ç–∞",
        "teachers_day": "–° –¥–Ω—ë–º —É—á–∏—Ç–µ–ª—è",
        "doctors_day": "–° –¥–Ω—ë–º –≤—Ä–∞—á–∞",
        "programmers_day": "–° –¥–Ω—ë–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞",
        "police_day": "–° –¥–Ω—ë–º –ø–æ–ª–∏—Ü–∏–∏",
        "prosecutor_day": "–° –¥–Ω—ë–º –ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä—ã",
        "lawyers_day": "–° –¥–Ω—ë–º —é—Ä–∏—Å—Ç–∞",
        "company_day": "–° –¥–Ω—ë–º –∫–æ–º–ø–∞–Ω–∏–∏",
        "promotion": "–° –ø–æ–≤—ã—à–µ–Ω–∏–µ–º",
        "retirement": "–° –≤—ã—Ö–æ–¥–æ–º –Ω–∞ –ø–µ–Ω—Å–∏—é",
        "project_success": "–° —É—Å–ø–µ—à–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º",
        "report_submitted": "–° —Å–¥–∞—á–µ–π –æ—Ç—á—ë—Ç–∞",
        "vacation_start": "–° –Ω–∞—á–∞–ª–æ–º –æ—Ç–ø—É—Å–∫–∞",
        "vacation_end": "–° –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º –æ—Ç–ø—É—Å–∫–∞",
    },
    "seasonal": {
        "new_year": "–° –ù–æ–≤—ã–º –≥–æ–¥–æ–º",
        "xmas": "–° –†–æ–∂–¥–µ—Å—Ç–≤–æ–º",
        "easter": "–° –ü–∞—Å—Ö–æ–π",
        "victory_day": "–° –î–Ω—ë–º –ü–æ–±–µ–¥—ã",
        "city_day": "–° –î–Ω—ë–º –≥–æ—Ä–æ–¥–∞",
        "independence_day": "–° –î–Ω—ë–º –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏",
        "spring_start": "–° –Ω–∞—á–∞–ª–æ–º –≤–µ—Å–Ω—ã",
        "summer_start": "–° –Ω–∞—á–∞–ª–æ–º –ª–µ—Ç–∞",
        "autumn_start": "–° –Ω–∞—á–∞–ª–æ–º –æ—Å–µ–Ω–∏",
        "winter_start": "–° –Ω–∞—á–∞–ª–æ–º –∑–∏–º—ã",
        "sep_1": "–° 1 —Å–µ–Ω—Ç—è–±—Ä—è",
    },
    "personal": {
        "graduation": "–° –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º —É—á—ë–±—ã",
        "diploma": "–° –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–∏–ø–ª–æ–º–∞",
        "car_purchase": "–° –ø–æ–∫—É–ø–∫–æ–π –º–∞—à–∏–Ω—ã",
        "apartment_purchase": "–° –ø–æ–∫—É–ø–∫–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã",
        "house_purchase": "–° –ø–æ–∫—É–ø–∫–æ–π –¥–æ–º–∞",
        "victory": "–° –ø–æ–±–µ–¥–æ–π",
        "award": "–° –Ω–∞–≥—Ä–∞–¥–æ–π",
        "sports_success": "–°–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–º —É—Å–ø–µ—Ö–æ–º",
        "recovery": "–° –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–µ–º",
        "discharge": "–° –≤—ã–ø–∏—Å–∫–æ–π",
        "relations_anniversary": "–° –≥–æ–¥–æ–≤—â–∏–Ω–æ–π –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
        "friendship_anniversary": "–° –≥–æ–¥–æ–≤—â–∏–Ω–æ–π –¥—Ä—É–∂–±—ã",
        "move": "–° –ø–µ—Ä–µ–µ–∑–¥–æ–º",
        "new_job": "–° –Ω–æ–≤–æ–π —Ä–∞–±–æ—Ç–æ–π",
    },
    "family": {
        "birth_child": "–° —Ä–æ–∂–¥–µ–Ω–∏–µ–º —Ä–µ–±—ë–Ω–∫–∞",
        "wedding": "–°–æ —Å–≤–∞–¥—å–±–æ–π",
        "engagement": "–° –ø–æ–º–æ–ª–≤–∫–æ–π",
        "proposal": "–° –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞",
        "wedding_anniversary": "–° –≥–æ–¥–æ–≤—â–∏–Ω–æ–π —Å–≤–∞–¥—å–±—ã",
        "mothers_day": "–° –¥–Ω—ë–º –º–∞—Ç–µ—Ä–∏",
        "fathers_day": "–° –¥–Ω—ë–º –æ—Ç—Ü–∞",
        "family_day": "–° –¥–Ω—ë–º —Å–µ–º—å–∏",
        "valentines_day": "–° –¥–Ω—ë–º —Å–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞",
        "name_day": "–° –¥–Ω—ë–º –∞–Ω–≥–µ–ª–∞",
        "new_home": "–° –Ω–æ–≤–æ—Å–µ–ª—å–µ–º",
    },
}

# –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è GPT
CATEGORY_INTERNAL = {
    "toast_corporate": "—Ç–æ—Å—Ç –Ω–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–µ",
    "toast_wedding": "—Ç–æ—Å—Ç –Ω–∞ —Å–≤–∞–¥—å–±–µ",
    "toast_new_year": "—Ç–æ—Å—Ç –Ω–∞ –ù–æ–≤—ã–π –≥–æ–¥",
    "toast_birthday": "—Ç–æ—Å—Ç –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è",
    "toast_farewell": "–ø—Ä–æ—â–∞–ª—å–Ω—ã–π —Ç–æ—Å—Ç",
    "toast_cocktail": "—Ç–æ—Å—Ç –Ω–∞ –∫–æ–∫—Ç–µ–π–ª—å–Ω–æ–º —á–∞—Å—É",
    "toast_romantic": "—Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ—Å—Ç",
    "toast_funny": "—Ç–æ—Å—Ç —Å —é–º–æ—Ä–æ–º",
    "bd_gen": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è",
    "bd_friend": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –¥—Ä—É–∑–µ–π",
    "bd_relatives": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è —Ä–æ–¥–Ω—ã—Ö",
    "bd_colleague": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –∫–æ–ª–ª–µ–≥",
    "bd_mother": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –º–∞–º—ã",
    "bd_father": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–∞–ø—ã",
    "bd_grandmother": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –±–∞–±—É—à–∫–∏",
    "bd_grandfather": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –¥–µ–¥—É—à–∫–∏",
    "bd_sister": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è —Å–µ—Å—Ç—Ä—ã",
    "bd_brother": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –±—Ä–∞—Ç–∞",
    "bd_child": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞",
    "bd_girlfriend": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –¥–µ–≤—É—à–∫–∏",
    "bd_boyfriend": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –º–æ–ª–æ–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞",
    "defender_day": "23 —Ñ–µ–≤—Ä–∞–ª—è",
    "womens_day": "8 –º–∞—Ä—Ç–∞",
    "teachers_day": "–¥–µ–Ω—å —É—á–∏—Ç–µ–ª—è",
    "doctors_day": "–¥–µ–Ω—å –≤—Ä–∞—á–∞",
    "programmers_day": "–¥–µ–Ω—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞",
    "police_day": "–¥–µ–Ω—å –ø–æ–ª–∏—Ü–∏–∏",
    "prosecutor_day": "–¥–µ–Ω—å –ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä—ã",
    "lawyers_day": "–¥–µ–Ω—å —é—Ä–∏—Å—Ç–∞",
    "company_day": "–¥–µ–Ω—å –∫–æ–º–ø–∞–Ω–∏–∏",
    "promotion": "–ø–æ–≤—ã—à–µ–Ω–∏–µ",
    "retirement": "–≤—ã—Ö–æ–¥ –Ω–∞ –ø–µ–Ω—Å–∏—é",
    "project_success": "—É—Å–ø–µ—à–Ω—ã–π –ø—Ä–æ–µ–∫—Ç",
    "report_submitted": "—Å–¥–∞—á–∞ –æ—Ç—á—ë—Ç–∞",
    "vacation_start": "–Ω–∞—á–∞–ª–æ –æ—Ç–ø—É—Å–∫–∞",
    "vacation_end": "–æ–∫–æ–Ω—á–∞–Ω–∏–µ –æ—Ç–ø—É—Å–∫–∞",
    "new_year": "–ù–æ–≤—ã–π –≥–æ–¥",
    "xmas": "–†–æ–∂–¥–µ—Å—Ç–≤–æ",
    "easter": "–ü–∞—Å—Ö–∞",
    "victory_day": "9 –º–∞—è",
    "city_day": "–¥–µ–Ω—å –≥–æ—Ä–æ–¥–∞",
    "independence_day": "–¥–µ–Ω—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏",
    "spring_start": "–Ω–∞—á–∞–ª–æ –≤–µ—Å–Ω—ã",
    "summer_start": "–Ω–∞—á–∞–ª–æ –ª–µ—Ç–∞",
    "autumn_start": "–Ω–∞—á–∞–ª–æ –æ—Å–µ–Ω–∏",
    "winter_start": "–Ω–∞—á–∞–ª–æ –∑–∏–º—ã",
    "sep_1": "1 —Å–µ–Ω—Ç—è–±—Ä—è",
    "graduation": "–æ–∫–æ–Ω—á–∞–Ω–∏–µ —É—á—ë–±—ã",
    "diploma": "–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–ø–ª–æ–º–∞",
    "car_purchase": "–ø–æ–∫—É–ø–∫–∞ –º–∞—à–∏–Ω—ã",
    "apartment_purchase": "–ø–æ–∫—É–ø–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã",
    "house_purchase": "–ø–æ–∫—É–ø–∫–∞ –¥–æ–º–∞",
    "victory": "–ø–æ–±–µ–¥–∞",
    "award": "–Ω–∞–≥—Ä–∞–¥–∞",
    "sports_success": "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —É—Å–ø–µ—Ö",
    "recovery": "–≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–µ",
    "discharge": "–≤—ã–ø–∏—Å–∫–∞",
    "relations_anniversary": "–≥–æ–¥–æ–≤—â–∏–Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
    "friendship_anniversary": "–≥–æ–¥–æ–≤—â–∏–Ω–∞ –¥—Ä—É–∂–±—ã",
    "move": "–ø–µ—Ä–µ–µ–∑–¥",
    "new_job": "–Ω–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞",
    "birth_child": "—Ä–æ–∂–¥–µ–Ω–∏–µ —Ä–µ–±—ë–Ω–∫–∞",
    "wedding": "—Å–≤–∞–¥—å–±–∞",
    "engagement": "–ø–æ–º–æ–ª–≤–∫–∞",
    "proposal": "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞",
    "wedding_anniversary": "–≥–æ–¥–æ–≤—â–∏–Ω–∞ —Å–≤–∞–¥—å–±—ã",
    "mothers_day": "–¥–µ–Ω—å –º–∞—Ç–µ—Ä–∏",
    "fathers_day": "–¥–µ–Ω—å –æ—Ç—Ü–∞",
    "family_day": "–¥–µ–Ω—å —Å–µ–º—å–∏",
    "valentines_day": "–î–µ–Ω—å —Å–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞",
    "name_day": "–¥–µ–Ω—å –∞–Ω–≥–µ–ª–∞",
    "new_home": "–Ω–æ–≤–æ—Å–µ–ª—å–µ",
}

# --- –ö–û–ù–ï–¶: –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π ---

# --- –ù–ê–ß–ê–õ–û: –°–º–∞–π–ª–∏–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π ---
EMOJI_MAP = {
    "toast_corporate": "ü•Çüçªüë®‚Äçüíºüë©‚Äçüíºüéâ",
    "toast_wedding": "ü•Çüíçüë∞ü§µüíê",
    "toast_new_year": "ü•ÇüçæüéÜüéâ",
    "toast_birthday": "ü•ÇüéÇüéàüéÅ",
    "toast_farewell": "ü•Çüëã‚úàÔ∏èüéâ",
    "toast_cocktail": "ü•Çüç∏üçπ",
    "toast_romantic": "ü•Çüíïüåπ",
    "toast_funny": "ü•ÇüòÇüéâ",
    "birthday": "üéâüéÇüéàüéÅüéä",
    "new_year": "üéÑ‚ùÑÔ∏è‚õÑüéÅ‚ú®",
    "wedding": "üíçüë∞ü§µüíêüíí",
    "wedding_anniversary": "üíçüíïü•Çüéâ",
    "graduation": "üéìüéìüìöüéâ",
    "car_purchase": "üöóüí®üèÅ",
    "apartment_purchase": "üè†üîëüéä",
    "house_purchase": "üè†üè°üéä",
    "victory": "üèÜüéØüéâ",
    "award": "üèÜüèÖüéâ",
    "sports_success": "üèÜ‚öΩüèÄüéæ",
    "recovery": "ü©πüíä‚úÖ",
    "discharge": "üè•‚úÖü©∫",
    "relations_anniversary": "üíïüåπü•Ç",
    "friendship_anniversary": "ü§ùüíïüéâ",
    "move": "üè†üööüì¶",
    "new_job": "üíºüëîüéâ",
    "promotion": "üíºüìàüéâ",
    "retirement": "üéâüèñÔ∏èüë¥üëµ",
    "project_success": "üöÄüéØüéâ",
    "report_submitted": "üìã‚úÖüéâ",
    "vacation_start": "‚úàÔ∏èüèñÔ∏è‚òÄÔ∏è",
    "vacation_end": "üè†üíºüìÖ",
    "valentines_day": "üíïüåπüç´üíù",
    "name_day": "üéÇüéâüéà",
    "new_home": "üè†üéâüéä",
    "mothers_day": "üë©üíêüíï",
    "fathers_day": "üë®üíºüéâ",
    "family_day": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶üíïüéâ",
    "defender_day": "üéñÔ∏èüë®‚Äç‚úàÔ∏èüéâ",
    "womens_day": "üå∑üë©üéâ",
    "teachers_day": "üìöüë©‚Äçüè´üçé",
    "doctors_day": "üè•üë®‚Äç‚öïÔ∏èüíä",
    "programmers_day": "üíª‚å®Ô∏èüë®‚Äçüíª",
    "police_day": "üöîüëÆ‚Äç‚ôÇÔ∏èüéñÔ∏è",
    "prosecutor_day": "‚öñÔ∏èüë®‚Äçüíºüéâ",
    "lawyers_day": "‚öñÔ∏èüë®‚Äçüíºüéâ",
    "company_day": "üè¢üéâüíº",
    "birth_child": "üë∂üçºüíï",
    "engagement": "üíçüíïüë∞ü§µ",
    "proposal": "üíçüíïüåπ",
    "xmas": "üéÑüéÅüéÖ‚ùÑÔ∏è",
    "easter": "üê∞ü•öüå∏‚úùÔ∏è",
    "victory_day": "üéâüéñÔ∏èüá∑üá∫",
    "city_day": "üèôÔ∏èüéäüéâ",
    "independence_day": "üéâüéÜüá∫üá∏",
    "spring_start": "üå∏üåº‚òÄÔ∏è",
    "summer_start": "‚òÄÔ∏èüèñÔ∏èüèä‚Äç‚ôÇÔ∏è",
    "autumn_start": "üçÅüçÉ‚òï",
    "winter_start": "‚ùÑÔ∏è‚õÑüéø",
    "sep_1": "üìöüéíüéì",
    "diploma": "üéìüìúüéâ",
    # –û–±—â–∏–µ —Å–º–∞–π–ª–∏–∫–∏
    "default": "üéâ‚ú®üéä"
}
# --- –ö–û–ù–ï–¶: –°–º–∞–π–ª–∏–∫–∏ ---

# --- –ù–ê–ß–ê–õ–û: –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ---
REQUEST_LIMIT_PER_MINUTE = 3
def is_rate_limited(user_id):
    now = datetime.now()
    user_requests = request_times.get(user_id, [])
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã)
    user_requests = [req_time for req_time in user_requests if now - req_time < timedelta(minutes=1)]
    if len(user_requests) >= REQUEST_LIMIT_PER_MINUTE:
        return True, now + timedelta(minutes=1) - user_requests[0] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∞
    user_requests.append(now)
    request_times[user_id] = user_requests
    return False, None
# --- –ö–û–ù–ï–¶: –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –±—ã—Å—Ç—Ä–æ –∏ –∫—Ä–∞—Å–∏–≤–æ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –∫–æ–≥–æ —É–≥–æ–¥–Ω–æ.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"
    )
    keyboard = [
        [InlineKeyboardButton(text, callback_data=key)] for key, text in MAIN_CATEGORIES.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /start –∏–ª–∏ callback
    if update.message:
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.edit_message_text(welcome_text, reply_markup=reply_markup)
    
    return CATEGORY

async def choose_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    category_key = query.data

    if category_key == "donate":
        bot_username = os.getenv("BOT_USERNAME")
        if bot_username:
            donate_url = f"https://t.me/{bot_username}?start=donate"
            keyboard = [
                [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", url=donate_url)],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main_category")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç! üôè\n\n"
                "–≠—Ç–æ—Ç –±–æ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∫–ª–∞–º—ã –∏ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –ª–∏—á–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.\n"
                "–í–∞—à –≤–∫–ª–∞–¥ –ø–æ–º–æ–∂–µ—Ç –ø–æ–∫—Ä—ã—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥ –∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ.\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ Telegram Stars.",
                reply_markup=reply_markup
            )
        else:
            keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main_category")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç! üôè\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ Telegram Stars. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º.\n\n"
                "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_USERNAME –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ–Ω–∞—Ç–æ–≤.",
                reply_markup=reply_markup
            )
        return CATEGORY

    if category_key == "feedback":
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main_category")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:", reply_markup=reply_markup)
        return FEEDBACK

    context.user_data['main_category'] = category_key

    subcats = SUBCATEGORIES.get(category_key, {})
    if not subcats:
        # –ï—Å–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç, –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É —Å–º–∞–π–ª–∏–∫–æ–≤
        context.user_data['subcategory_key'] = category_key
        if category_key == "toast":
            # –î–ª—è —Ç–æ—Å—Ç–æ–≤ —Å—Ä–∞–∑—É —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —Å–º–∞–π–ª–∏–∫–∏
            keyboard = [
                [InlineKeyboardButton("–î–∞", callback_data="emojis_yes")],
                [InlineKeyboardButton("–ù–µ—Ç", callback_data="emojis_no")],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main_category")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–î–æ–±–∞–≤–∏—Ç—å —Å–º–∞–π–ª–∏–∫–∏ –≤ —Ç–æ—Å—Ç?", reply_markup=reply_markup)
            return EMOJIS
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö - —Å—Ä–∞–∑—É –∫ —Å–º–∞–π–ª–∏–∫–∞–º
            keyboard = [
                [InlineKeyboardButton("–î–∞", callback_data="emojis_yes")],
                [InlineKeyboardButton("–ù–µ—Ç", callback_data="emojis_no")],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main_category")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–î–æ–±–∞–≤–∏—Ç—å —Å–º–∞–π–ª–∏–∫–∏?", reply_markup=reply_markup)
            return EMOJIS

    keyboard = [
        [InlineKeyboardButton(text, callback_data=key)] for key, text in subcats.items()
    ]
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main_category")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {MAIN_CATEGORIES[category_key]}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
    return SUBCATEGORY

async def choose_subcategory(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    subcategory_key = query.data
    context.user_data['subcategory_key'] = subcategory_key

    # –î–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —Å–º–∞–π–ª–∏–∫–∏
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="emojis_yes")],
        [InlineKeyboardButton("–ù–µ—Ç", callback_data="emojis_no")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_category")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if context.user_data.get('main_category') == 'toast':
        await query.edit_message_text("–î–æ–±–∞–≤–∏—Ç—å —Å–º–∞–π–ª–∏–∫–∏ –≤ —Ç–æ—Å—Ç?", reply_markup=reply_markup)
    else:
        await query.edit_message_text("–î–æ–±–∞–≤–∏—Ç—å —Å–º–∞–π–ª–∏–∫–∏?", reply_markup=reply_markup)
    
    return EMOJIS

async def choose_emojis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    emoji_choice = query.data
    if emoji_choice == "emojis_yes":
        context.user_data['emojis'] = True
    else:
        context.user_data['emojis'] = False

    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_name")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_emojis")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–¥–ª—è –∫–æ–ª–ª–µ–≥–∏', '–¥–ª—è –º–∞–º—ã'), –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=reply_markup)
    return NAME

async def back_to_main_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –±—ã—Å—Ç—Ä–æ –∏ –∫—Ä–∞—Å–∏–≤–æ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –∫–æ–≥–æ —É–≥–æ–¥–Ω–æ.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"
    )
    keyboard = [
        [InlineKeyboardButton(text, callback_data=key)] for key, text in MAIN_CATEGORIES.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(welcome_text, reply_markup=reply_markup)
    return CATEGORY

async def back_to_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    category_key = context.user_data.get('main_category')
    if category_key:
        subcats = SUBCATEGORIES.get(category_key, {})
        if subcats:
            keyboard = [
                [InlineKeyboardButton(text, callback_data=key)] for key, text in subcats.items()
            ]
            keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main_category")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {MAIN_CATEGORIES[category_key]}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
            return SUBCATEGORY
        else:
            # –ï—Å–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
            return await back_to_main_category(update, context)
    else:
        return await back_to_main_category(update, context)

async def back_to_emojis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–º–∞–π–ª–∏–∫–æ–≤
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="emojis_yes")],
        [InlineKeyboardButton("–ù–µ—Ç", callback_data="emojis_no")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_category")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if context.user_data.get('main_category') == 'toast':
        await query.edit_message_text("–î–æ–±–∞–≤–∏—Ç—å —Å–º–∞–π–ª–∏–∫–∏ –≤ —Ç–æ—Å—Ç?", reply_markup=reply_markup)
    else:
        await query.edit_message_text("–î–æ–±–∞–≤–∏—Ç—å —Å–º–∞–π–ª–∏–∫–∏?", reply_markup=reply_markup)
    
    return EMOJIS

async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    name = update.message.text
    context.user_data['name'] = name
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    sent_message = await update.message.reply_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é... ‚è≥")
    context.user_data['generating_message_id'] = sent_message.message_id
    
    await generate_message(update, context)
    return GENERATE

async def skip_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['name'] = None
    await query.edit_message_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é... ‚è≥")
    await generate_message_callback(update, context)
    return GENERATE

async def generate_message_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await generate_message(query, context)
    return GENERATE

async def generate_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ update –æ–±—ä–µ–∫—Ç–æ–º CallbackQuery
    if hasattr(update, 'from_user') and hasattr(update, 'message'):
        # –≠—Ç–æ CallbackQuery
        user_id = update.from_user.id
        message_obj = update.message
    else:
        # –≠—Ç–æ –æ–±—ã—á–Ω—ã–π Update
        user_id = update.effective_user.id
        message_obj = update.message

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
    is_limited, reset_time = is_rate_limited(user_id)
    if is_limited:
        if reset_time:
            minutes_left = int(reset_time.total_seconds() // 60)
            seconds_left = int(reset_time.total_seconds() % 60)
            await message_obj.reply_text(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {minutes_left} –º–∏–Ω {seconds_left} —Å–µ–∫.")
        else:
            await message_obj.reply_text("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return GENERATE

    subcategory_key = context.user_data.get('subcategory_key')
    name = context.user_data.get('name', "–¥—Ä—É–≥–∞")
    emojis = context.user_data.get('emojis', False)

    category_internal = CATEGORY_INTERNAL.get(subcategory_key, "–ø—Ä–∞–∑–¥–Ω–∏–∫")

    # –í—ã–±–∏—Ä–∞–µ–º —Å–º–∞–π–ª–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    emoji_string = EMOJI_MAP.get(subcategory_key, EMOJI_MAP.get(category_internal.split()[0], EMOJI_MAP["default"])) if emojis else ""
    emoji_instruction = f"–†–∞–∑—Ä–µ—à–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Å–º–∞–π–ª–∏–∫–∏: {emoji_string}. –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏ –∏—Ö —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –≤—Å–µ–º —Ç—Ä—ë–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º, –æ—Ç 10 –¥–æ 20 —à—Ç—É–∫ –≤ –∫–∞–∂–¥–æ–º, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ —É–º–µ—Å—Ç–Ω—ã –∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∏—Å—å —á–∞—Å—Ç–æ –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞." if emojis else "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–º–∞–π–ª—ã."

    name_part = f"–ø–æ–∑–¥—Ä–∞–≤—å {name}" if name else "–ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∞"

    # –ü—Ä–æ–º—Ç –¥–ª—è —Ç–æ—Å—Ç–æ–≤
    if subcategory_key.startswith('toast_'):
        prompt = f"""
–°–æ–∑–¥–∞–π 3 —Ä–∞–∑–Ω—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö {category_internal}, –∫–æ—Ç–æ—Ä—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è.
{emoji_instruction}
–ê–¥—Ä–µ—Å–∞—Ç: {name_part}.
–Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π.
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –≠—Ç–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å **—Ä–µ–∞–ª—å–Ω—ã–µ**, **—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ** —Ç–æ—Å—Ç—ã, **–Ω–µ –ø—Ä–∏–¥—É–º–∞–Ω–Ω—ã–µ**.
- –ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ —Ñ—Ä–∞–∑ –º–µ–∂–¥—É –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏.
- –ë–µ–∑ –∫–ª–∏—à–µ "–∂–µ–ª–∞—é —Å—á–∞—Å—Ç—å—è, –∑–¥–æ—Ä–æ–≤—å—è".
- –°–æ—Ö—Ä–∞–Ω–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∏—Ç–º —Ä–µ—á–∏.
- –ò–∑–±–µ–≥–∞–π –¥–ª–∏–Ω–Ω—ã—Ö —Ç–∏—Ä–µ (‚Äî), –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ (-) –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–±–µ–ª.
- –ü–∏—à–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞ ("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é", "–û—Ç –≤—Å–µ–π –¥—É—à–∏", "–° —Ç–µ–ø–ª–æ–º –≤ —Å–µ—Ä–¥—Ü–µ").
- –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "ChatGPT", "OpenAI" –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è.
- –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∏ –ø–æ –¥–µ–ª—É.
- –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ –≤–∏–¥–µ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
"""
        system_prompt = "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ—Ä —Ç–æ—Å—Ç–æ–≤. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í–æ–∑–≤—Ä–∞—â–∞–π 3 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö, —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ—Å—Ç–∞ –≤ –≤–∏–¥–µ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–∏—Ä–µ (-). –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Å–º–∞–π–ª–∏–∫–∏, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏ –∏—Ö —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –≤—Å–µ–º —Ç—Ä—ë–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º, –æ—Ç 10 –¥–æ 20 —à—Ç—É–∫ –≤ –∫–∞–∂–¥–æ–º, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ —É–º–µ—Å—Ç–Ω—ã –∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∏—Å—å —á–∞—Å—Ç–æ –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞."
    else:
        # –ü—Ä–æ–º—Ç –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
        prompt = f"""
–°–æ–∑–¥–∞–π 3 —Ä–∞–∑–Ω—ã—Ö {category_internal} –≤ –ø—Ä–æ–∑–µ –∏–ª–∏ —Å—Ç–∏—Ö–µ.
{emoji_instruction}
–ê–¥—Ä–µ—Å–∞—Ç: {name_part}.
–Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π.
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ —Ñ—Ä–∞–∑ –º–µ–∂–¥—É –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏.
- –ë–µ–∑ –∫–ª–∏—à–µ "–∂–µ–ª–∞—é —Å—á–∞—Å—Ç—å—è, –∑–¥–æ—Ä–æ–≤—å—è".
- –°–æ—Ö—Ä–∞–Ω–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∏—Ç–º —Ä–µ—á–∏.
- –ò–∑–±–µ–≥–∞–π –¥–ª–∏–Ω–Ω—ã—Ö —Ç–∏—Ä–µ (‚Äî), –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ (-) –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–±–µ–ª.
- –ü–∏—à–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞ ("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é", "–û—Ç –≤—Å–µ–π –¥—É—à–∏", "–° —Ç–µ–ø–ª–æ–º –≤ —Å–µ—Ä–¥—Ü–µ").
- –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "ChatGPT", "OpenAI" –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è.
- –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∏ –ø–æ –¥–µ–ª—É.
- –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ –≤–∏–¥–µ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
"""
        system_prompt = "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ—Ä –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –∏ —Ç–æ—Å—Ç–æ–≤. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏ –ø–æ–¥—Ä—è–¥ (–º–∞–∫—Å. 1), –∏–∑–±–µ–≥–∞–π —à–∞–±–ª–æ–Ω–æ–≤ '–∂–µ–ª–∞—é —Å—á–∞—Å—Ç—å—è, –∑–¥–æ—Ä–æ–≤—å—è'. –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ –≤–∏–¥–µ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–∏—Ä–µ (-). –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Å–º–∞–π–ª–∏–∫–∏, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏ –∏—Ö —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –≤—Å–µ–º —Ç—Ä—ë–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º, –æ—Ç 10 –¥–æ 20 —à—Ç—É–∫ –≤ –∫–∞–∂–¥–æ–º, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ —É–º–µ—Å—Ç–Ω—ã –∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∏—Å—å —á–∞—Å—Ç–æ –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞."

    try:
        client = openai.AsyncOpenAI(api_key=OPENAI_API_KEY)
        response = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt}
            ],
            max_tokens=2000,
            temperature=0.7
        )

        message_text = response.choices[0].message.content
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 3 —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ
        parts = message_text.split("\n\n")
        for part in parts:
            if part.strip():
                # –£–±–∏—Ä–∞–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                clean_part = part.strip()
                if clean_part.startswith(("1.", "2.", "3.")):
                    clean_part = clean_part[2:].strip()
                await message_obj.reply_text(clean_part)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await message_obj.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    # –ö–Ω–æ–ø–∫–∏ "–ï—â—ë" –∏ "–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞"
    keyboard = [
        [InlineKeyboardButton("–ï—â—ë –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data="generate_again")],
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="restart_bot")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await message_obj.reply_text("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=reply_markup)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º GENERATE, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞–ª–∏
    return GENERATE

async def generate_again(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–µ... ‚è≥")
    await generate_message(query, context)
    return GENERATE

async def restart_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ - –≤–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º user_data
    context.user_data.clear()
    
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –±—ã—Å—Ç—Ä–æ –∏ –∫—Ä–∞—Å–∏–≤–æ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –∫–æ–≥–æ —É–≥–æ–¥–Ω–æ.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"
    )
    keyboard = [
        [InlineKeyboardButton(text, callback_data=key)] for key, text in MAIN_CATEGORIES.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(welcome_text, reply_markup=reply_markup)
    return CATEGORY

async def handle_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    feedback_text = update.message.text
    user = update.effective_user
    logger.info(f"Feedback from {user.id} (@{user.username}): {feedback_text}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    admin_id = os.getenv("ADMIN_TELEGRAM_ID")
    if admin_id:
        try:
            await context.bot.send_message(
                chat_id=int(admin_id), 
                text=f"–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç @{user.username} (ID: {user.id}):\n\n{feedback_text}"
            )
            await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã –µ–≥–æ –ø–æ–ª—É—á–∏–ª–∏. ‚úÖ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∞–¥–º–∏–Ω—É: {e}")
            await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! (–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É)")
    else:
        logger.warning(f"Feedback received, but ADMIN_TELEGRAM_ID not set. Message: {feedback_text}")
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! ‚úÖ\n\n"
            "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_TELEGRAM_ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."
        )

    return ConversationHandler.END

# --- –ù–ê–ß–ê–õ–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–Ω–∞—Ç–∞ ---
async def handle_donate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    bot_username = os.getenv("BOT_USERNAME")
    if bot_username:
        donate_url = f"https://t.me/{bot_username}?start=donate"
        keyboard = [
            [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", url=donate_url)],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main_category")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç! üôè\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∫–ª–∞–º—ã –∏ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –ª–∏—á–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.\n"
            "–í–∞—à –≤–∫–ª–∞–¥ –ø–æ–º–æ–∂–µ—Ç –ø–æ–∫—Ä—ã—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥ –∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ Telegram Stars.",
            reply_markup=reply_markup
        )
    else:
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main_category")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç! üôè\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ Telegram Stars. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º.\n\n"
            "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_USERNAME –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ–Ω–∞—Ç–æ–≤.",
            reply_markup=reply_markup
        )
# --- –ö–û–ù–ï–¶: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–Ω–∞—Ç–∞ ---

def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CATEGORY: [
                CallbackQueryHandler(choose_category),
                CallbackQueryHandler(back_to_main_category, pattern="^back_to_main_category$"),
            ],
            SUBCATEGORY: [
                CallbackQueryHandler(choose_subcategory),
                CallbackQueryHandler(back_to_main_category, pattern="^back_to_main_category$"),
            ],
            EMOJIS: [
                CallbackQueryHandler(choose_emojis, pattern="^emojis_(yes|no)$"),
                CallbackQueryHandler(back_to_category, pattern="^back_to_category$"),
                CallbackQueryHandler(back_to_main_category, pattern="^back_to_main_category$"),
            ],
            NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_name),
                CallbackQueryHandler(skip_name, pattern="^skip_name$"),
                CallbackQueryHandler(back_to_emojis, pattern="^back_to_emojis$"),
                CallbackQueryHandler(back_to_category, pattern="^back_to_category$"),
                CallbackQueryHandler(back_to_main_category, pattern="^back_to_main_category$"),
            ],
            GENERATE: [
                CallbackQueryHandler(generate_again, pattern="^generate_again$"),
                CallbackQueryHandler(restart_bot, pattern="^restart_bot$"),
                CallbackQueryHandler(back_to_main_category, pattern="^back_to_main_category$"),
            ],
            FEEDBACK: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_feedback),
                CallbackQueryHandler(back_to_main_category, pattern="^back_to_main_category$"),
            ],
        },
        fallbacks=[CommandHandler('start', start)]
    )

    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(handle_donate, pattern="^donate_stars$"))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling()

if __name__ == '__main__':
    main()
