# main.py
import os
import logging
import asyncio
import json
import tempfile
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    PreCheckoutQueryHandler,
    filters,
    ContextTypes,
)
from telegram.error import Conflict
import openai

# --- –ù–ê–ß–ê–õ–û: Google Sheets ---
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets –∫–ª–∏–µ–Ω—Ç–∞
def init_google_sheets():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
        sheet_id = os.getenv("GOOGLE_SHEET_ID")
        
        if not creds_json or not sheet_id:
            logger.warning("‚ö†Ô∏è Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            return None, None
        
        # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å credentials
        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.json') as temp_file:
            temp_file.write(creds_json)
            temp_file_path = temp_file.name
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        scope = [
            'https://spreadsheets.google.com/feeds',
            'https://www.googleapis.com/auth/drive'
        ]
        
        creds = ServiceAccountCredentials.from_json_keyfile_name(temp_file_path, scope)
        client = gspread.authorize(creds)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_file_path)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        sheet = client.open_by_key(sheet_id)
        
        logger.info("‚úÖ Google Sheets —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã!")
        return sheet, sheet_id
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
        return None, None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Google Sheets
GOOGLE_SHEET = None
GOOGLE_SHEET_ID = None

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ Google Sheets
def log_to_sheets(worksheet_name, data):
    """–ó–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ª–∏—Å—Ç Google Sheets"""
    try:
        if not GOOGLE_SHEET:
            return
        
        worksheet = GOOGLE_SHEET.worksheet(worksheet_name)
        worksheet.append_row(data)
        logger.info(f"üìä –ó–∞–ø–∏—Å–∞–Ω–æ –≤ {worksheet_name}: {data}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets ({worksheet_name}): {e}")

def log_user(user):
    """–ó–∞–ø–∏—Å–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        if not GOOGLE_SHEET:
            return
        
        worksheet = GOOGLE_SHEET.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            cell = worksheet.find(str(user.id))
            row_num = cell.row
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç –∏ —Å—á—ë—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
            current_count = int(worksheet.cell(row_num, 6).value or 0)
            worksheet.update_cell(row_num, 5, datetime.now().strftime("%Y-%m-%d %H:%M:%S"))  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç
            worksheet.update_cell(row_num, 6, current_count + 1)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
            
        except gspread.CellNotFound:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            data = [
                user.id,
                user.username or "–±–µ–∑ username",
                f"{user.first_name or ''} {user.last_name or ''}".strip(),
                datetime.now().strftime("%Y-%m-%d %H:%M:%S"),  # –ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç
                datetime.now().strftime("%Y-%m-%d %H:%M:%S"),  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç
                1  # –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
            ]
            worksheet.append_row(data)
            logger.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id} (@{user.username})")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

def log_generation(user, category, subcategory, style, emojis, name_provided, success):
    """–ó–∞–ø–∏—Å–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è"""
    data = [
        datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        user.id,
        user.username or "–±–µ–∑ username",
        category,
        subcategory,
        style,
        "–î–∞" if emojis else "–ù–µ—Ç",
        "–î–∞" if name_provided else "–ù–µ—Ç",
        "–£—Å–ø–µ—Ö" if success else "–û—à–∏–±–∫–∞"
    ]
    log_to_sheets("–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏", data)

def log_donation(user, amount, payload):
    """–ó–∞–ø–∏—Å–∞—Ç—å –¥–æ–Ω–∞—Ç"""
    data = [
        datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        user.id,
        user.username or "–±–µ–∑ username",
        amount,
        payload
    ]
    log_to_sheets("–î–æ–Ω–∞—Ç—ã", data)

def log_feedback(user, message):
    """–ó–∞–ø–∏—Å–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"""
    data = [
        datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        user.id,
        user.username or "–±–µ–∑ username",
        message
    ]
    log_to_sheets("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", data)

def log_rate_limit(user, seconds_left):
    """–ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞"""
    data = [
        datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        user.id,
        user.username or "–±–µ–∑ username",
        seconds_left
    ]
    log_to_sheets("–õ–∏–º–∏—Ç—ã", data)

# --- –ö–û–ù–ï–¶: Google Sheets ---

# --- –ù–ê–ß–ê–õ–û: –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ---
request_times = {}
# --- –ö–û–ù–ï–¶: –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ---

# –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–¥–∞–≤–ª—è–µ–º httpx –ª–æ–≥–∏
logging.getLogger("httpx").setLevel(logging.WARNING)

# –ü–æ–¥–∞–≤–ª—è–µ–º PTBUserWarning
import warnings
from telegram.warnings import PTBUserWarning
warnings.filterwarnings(action="ignore", message=r".*CallbackQueryHandler", category=PTBUserWarning)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∞–≥–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
CATEGORY, SUBCATEGORY, STYLE, EMOJIS, NAME, GENERATE, FEEDBACK = range(7)

# --- –ù–ê–ß–ê–õ–û: –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π ---
MAIN_CATEGORIES = {
    "toast": "ü•Ç –¢–æ—Å—Ç—ã",
    "birthday": "üéÇ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è",
    "professional": "üíº –†–∞–±–æ—á–∏–µ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ",
    "seasonal": "üéÑ –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ / —Å–µ–∑–æ–Ω–Ω—ã–µ",
    "personal": "‚ù§Ô∏è –õ–∏—á–Ω—ã–µ –ø–æ–≤–æ–¥—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
    "family": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º–µ–π–Ω—ã–µ",
    "donate": "‚òï –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç",
    "feedback": "‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",
}

SUBCATEGORIES = {
    "toast": {
        "toast_corporate": "–ù–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–µ",
        "toast_wedding": "–ù–∞ —Å–≤–∞–¥—å–±–µ",
        "toast_new_year": "–ù–∞ –ù–æ–≤—ã–π –≥–æ–¥",
        "toast_birthday": "–ù–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è",
        "toast_farewell": "–ü—Ä–æ—â–∞–ª—å–Ω—ã–π",
        "toast_cocktail": "–ö–æ–∫—Ç–µ–π–ª—å–Ω—ã–π —á–∞—Å",
        "toast_romantic": "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π",
        "toast_funny": "–° —é–º–æ—Ä–æ–º",
    },
    "birthday": {
        "bd_gen": "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ",
        "bd_friend": "–¥–ª—è –¥—Ä—É–∑–µ–π",
        "bd_relatives": "–¥–ª—è —Ä–æ–¥–Ω—ã—Ö",
        "bd_colleague": "–¥–ª—è –∫–æ–ª–ª–µ–≥",
        "bd_mother": "–¥–ª—è –º–∞–º—ã",
        "bd_father": "–¥–ª—è –ø–∞–ø—ã",
        "bd_grandmother": "–¥–ª—è –±–∞–±—É—à–∫–∏",
        "bd_grandfather": "–¥–ª—è –¥–µ–¥—É—à–∫–∏",
        "bd_sister": "–¥–ª—è —Å–µ—Å—Ç—Ä—ã",
        "bd_brother": "–¥–ª—è –±—Ä–∞—Ç–∞",
        "bd_child": "–¥–ª—è —Ä–µ–±—ë–Ω–∫–∞",
        "bd_girlfriend": "–¥–ª—è –¥–µ–≤—É—à–∫–∏",
        "bd_boyfriend": "–¥–ª—è –º–æ–ª–æ–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞",
    },
    "professional": {
        "defender_day": "–° –¥–Ω—ë–º –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞",
        "womens_day": "–° 8 –º–∞—Ä—Ç–∞",
        "teachers_day": "–° –¥–Ω—ë–º —É—á–∏—Ç–µ–ª—è",
        "doctors_day": "–° –¥–Ω—ë–º –≤—Ä–∞—á–∞",
        "programmers_day": "–° –¥–Ω—ë–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞",
        "police_day": "–° –¥–Ω—ë–º –ø–æ–ª–∏—Ü–∏–∏",
        "prosecutor_day": "–° –¥–Ω—ë–º –ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä—ã",
        "lawyers_day": "–° –¥–Ω—ë–º —é—Ä–∏—Å—Ç–∞",
        "company_day": "–° –¥–Ω—ë–º –∫–æ–º–ø–∞–Ω–∏–∏",
        "promotion": "–° –ø–æ–≤—ã—à–µ–Ω–∏–µ–º",
        "retirement": "–° –≤—ã—Ö–æ–¥–æ–º –Ω–∞ –ø–µ–Ω—Å–∏—é",
        "project_success": "–° —É—Å–ø–µ—à–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º",
        "report_submitted": "–° —Å–¥–∞—á–µ–π –æ—Ç—á—ë—Ç–∞",
        "vacation_start": "–° –Ω–∞—á–∞–ª–æ–º –æ—Ç–ø—É—Å–∫–∞",
        "vacation_end": "–° –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º –æ—Ç–ø—É—Å–∫–∞",
    },
    "seasonal": {
        "new_year": "–° –ù–æ–≤—ã–º –≥–æ–¥–æ–º",
        "xmas": "–° –†–æ–∂–¥–µ—Å—Ç–≤–æ–º",
        "easter": "–° –ü–∞—Å—Ö–æ–π",
        "victory_day": "–° –î–Ω—ë–º –ü–æ–±–µ–¥—ã",
        "city_day": "–° –î–Ω—ë–º –≥–æ—Ä–æ–¥–∞",
        "independence_day": "–° –î–Ω—ë–º –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏",
        "spring_start": "–° –Ω–∞—á–∞–ª–æ–º –≤–µ—Å–Ω—ã",
        "summer_start": "–° –Ω–∞—á–∞–ª–æ–º –ª–µ—Ç–∞",
        "autumn_start": "–° –Ω–∞—á–∞–ª–æ–º –æ—Å–µ–Ω–∏",
        "winter_start": "–° –Ω–∞—á–∞–ª–æ–º –∑–∏–º—ã",
        "sep_1": "–° 1 —Å–µ–Ω—Ç—è–±—Ä—è",
    },
    "personal": {
        "graduation": "–° –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º —É—á—ë–±—ã",
        "diploma": "–° –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–∏–ø–ª–æ–º–∞",
        "car_purchase": "–° –ø–æ–∫—É–ø–∫–æ–π –º–∞—à–∏–Ω—ã",
        "apartment_purchase": "–° –ø–æ–∫—É–ø–∫–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã",
        "house_purchase": "–° –ø–æ–∫—É–ø–∫–æ–π –¥–æ–º–∞",
        "victory": "–° –ø–æ–±–µ–¥–æ–π",
        "award": "–° –Ω–∞–≥—Ä–∞–¥–æ–π",
        "sports_success": "–°–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–º —É—Å–ø–µ—Ö–æ–º",
        "recovery": "–° –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–µ–º",
        "discharge": "–° –≤—ã–ø–∏—Å–∫–æ–π",
        "relations_anniversary": "–° –≥–æ–¥–æ–≤—â–∏–Ω–æ–π –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
        "friendship_anniversary": "–° –≥–æ–¥–æ–≤—â–∏–Ω–æ–π –¥—Ä—É–∂–±—ã",
        "move": "–° –ø–µ—Ä–µ–µ–∑–¥–æ–º",
        "new_job": "–° –Ω–æ–≤–æ–π —Ä–∞–±–æ—Ç–æ–π",
    },
    "family": {
        "birth_child": "–° —Ä–æ–∂–¥–µ–Ω–∏–µ–º —Ä–µ–±—ë–Ω–∫–∞",
        "wedding": "–°–æ —Å–≤–∞–¥—å–±–æ–π",
        "engagement": "–° –ø–æ–º–æ–ª–≤–∫–æ–π",
        "proposal": "–° –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞",
        "wedding_anniversary": "–° –≥–æ–¥–æ–≤—â–∏–Ω–æ–π —Å–≤–∞–¥—å–±—ã",
        "mothers_day": "–° –¥–Ω—ë–º –º–∞—Ç–µ—Ä–∏",
        "fathers_day": "–° –¥–Ω—ë–º –æ—Ç—Ü–∞",
        "family_day": "–° –¥–Ω—ë–º —Å–µ–º—å–∏",
        "valentines_day": "–° –¥–Ω—ë–º —Å–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞",
        "name_day": "–° –¥–Ω—ë–º –∞–Ω–≥–µ–ª–∞",
        "new_home": "–° –Ω–æ–≤–æ—Å–µ–ª—å–µ–º",
    },
}

STYLES = {
    "standard": "üìù –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ / —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ",
    "short": "‚úÇÔ∏è –ö–æ—Ä–æ—Ç–∫–æ–µ / –ª–∞–∫–æ–Ω–∏—á–Ω–æ–µ",
    "funny": "üòÑ –°–º–µ—à–Ω–æ–µ / —Å —é–º–æ—Ä–æ–º",
    "warm": "‚ù§Ô∏è –î—É—à–µ–≤–Ω–æ–µ / —Ç—ë–ø–ª–æ–µ",
    "formal": "üíº –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ / –¥–µ–ª–æ–≤–æ–µ",
    "romantic": "üíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ",
}

STYLE_DESCRIPTIONS = {
    "standard": "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ, –≤–µ–∂–ª–∏–≤–æ–µ, —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ",
    "short": "–æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ–µ, –ª–∞–∫–æ–Ω–∏—á–Ω–æ–µ, 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤",
    "funny": "—Å —é–º–æ—Ä–æ–º, –ª—ë–≥–∫–∞—è –∏—Ä–æ–Ω–∏—è, –∑–∞–±–∞–≤–Ω–æ–µ, –Ω–æ –Ω–µ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω–æ–µ",
    "warm": "–¥—É—à–µ–≤–Ω–æ–µ, —Ç—ë–ø–ª–æ–µ, –æ—Ç —Å–µ—Ä–¥—Ü–∞, —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —á—É–≤—Å—Ç–≤–∞ –∏ —ç–º–æ—Ü–∏–∏",
    "formal": "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ, –¥–µ–ª–æ–≤–æ–µ, —Å—Ç—Ä–æ–≥–æ–µ, —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–Ω –±–µ–∑ —à—É—Ç–æ–∫",
    "romantic": "—Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ, –Ω–µ–∂–Ω–æ–µ, –º—è–≥–∫–æ–µ, —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —á—É–≤—Å—Ç–≤–∞",
}

CATEGORY_INTERNAL = {
    "toast_corporate": "—Ç–æ—Å—Ç –Ω–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–µ",
    "toast_wedding": "—Ç–æ—Å—Ç –Ω–∞ —Å–≤–∞–¥—å–±–µ",
    "toast_new_year": "—Ç–æ—Å—Ç –Ω–∞ –ù–æ–≤—ã–π –≥–æ–¥",
    "toast_birthday": "—Ç–æ—Å—Ç –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è",
    "toast_farewell": "–ø—Ä–æ—â–∞–ª—å–Ω—ã–π —Ç–æ—Å—Ç",
    "toast_cocktail": "—Ç–æ—Å—Ç –Ω–∞ –∫–æ–∫—Ç–µ–π–ª—å–Ω–æ–º —á–∞—Å—É",
    "toast_romantic": "—Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ—Å—Ç",
    "toast_funny": "—Ç–æ—Å—Ç —Å —é–º–æ—Ä–æ–º",
    "bd_gen": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è",
    "bd_friend": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –¥—Ä—É–∑–µ–π",
    "bd_relatives": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è —Ä–æ–¥–Ω—ã—Ö",
    "bd_colleague": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –∫–æ–ª–ª–µ–≥",
    "bd_mother": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –º–∞–º—ã",
    "bd_father": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–∞–ø—ã",
    "bd_grandmother": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –±–∞–±—É—à–∫–∏",
    "bd_grandfather": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –¥–µ–¥—É—à–∫–∏",
    "bd_sister": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è —Å–µ—Å—Ç—Ä—ã",
    "bd_brother": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –±—Ä–∞—Ç–∞",
    "bd_child": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞",
    "bd_girlfriend": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –¥–µ–≤—É—à–∫–∏",
    "bd_boyfriend": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –º–æ–ª–æ–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞",
    "defender_day": "23 —Ñ–µ–≤—Ä–∞–ª—è",
    "womens_day": "8 –º–∞—Ä—Ç–∞",
    "teachers_day": "–¥–µ–Ω—å —É—á–∏—Ç–µ–ª—è",
    "doctors_day": "–¥–µ–Ω—å –≤—Ä–∞—á–∞",
    "programmers_day": "–¥–µ–Ω—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞",
    "police_day": "–¥–µ–Ω—å –ø–æ–ª–∏—Ü–∏–∏",
    "prosecutor_day": "–¥–µ–Ω—å –ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä—ã",
    "lawyers_day": "–¥–µ–Ω—å —é—Ä–∏—Å—Ç–∞",
    "company_day": "–¥–µ–Ω—å –∫–æ–º–ø–∞–Ω–∏–∏",
    "promotion": "–ø–æ–≤—ã—à–µ–Ω–∏–µ",
    "retirement": "–≤—ã—Ö–æ–¥ –Ω–∞ –ø–µ–Ω—Å–∏—é",
    "project_success": "—É—Å–ø–µ—à–Ω—ã–π –ø—Ä–æ–µ–∫—Ç",
    "report_submitted": "—Å–¥–∞—á–∞ –æ—Ç—á—ë—Ç–∞",
    "vacation_start": "–Ω–∞—á–∞–ª–æ –æ—Ç–ø—É—Å–∫–∞",
    "vacation_end": "–æ–∫–æ–Ω—á–∞–Ω–∏–µ –æ—Ç–ø—É—Å–∫–∞",
    "new_year": "–ù–æ–≤—ã–π –≥–æ–¥",
    "xmas": "–†–æ–∂–¥–µ—Å—Ç–≤–æ",
    "easter": "–ü–∞—Å—Ö–∞",
    "victory_day": "9 –º–∞—è",
    "city_day": "–¥–µ–Ω—å –≥–æ—Ä–æ–¥–∞",
    "independence_day": "–¥–µ–Ω—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏",
    "spring_start": "–Ω–∞—á–∞–ª–æ –≤–µ—Å–Ω—ã",
    "summer_start": "–Ω–∞—á–∞–ª–æ –ª–µ—Ç–∞",
    "autumn_start": "–Ω–∞—á–∞–ª–æ –æ—Å–µ–Ω–∏",
    "winter_start": "–Ω–∞—á–∞–ª–æ –∑–∏–º—ã",
    "sep_1": "1 —Å–µ–Ω—Ç—è–±—Ä—è",
    "graduation": "–æ–∫–æ–Ω—á–∞–Ω–∏–µ —É—á—ë–±—ã",
    "diploma": "–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–ø–ª–æ–º–∞",
    "car_purchase": "–ø–æ–∫—É–ø–∫–∞ –º–∞—à–∏–Ω—ã",
    "apartment_purchase": "–ø–æ–∫—É–ø–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã",
    "house_purchase": "–ø–æ–∫—É–ø–∫–∞ –¥–æ–º–∞",
    "victory": "–ø–æ–±–µ–¥–∞",
    "award": "–Ω–∞–≥—Ä–∞–¥–∞",
    "sports_success": "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —É—Å–ø–µ—Ö",
    "recovery": "–≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–µ",
    "discharge": "–≤—ã–ø–∏—Å–∫–∞",
    "relations_anniversary": "–≥–æ–¥–æ–≤—â–∏–Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
    "friendship_anniversary": "–≥–æ–¥–æ–≤—â–∏–Ω–∞ –¥—Ä—É–∂–±—ã",
    "move": "–ø–µ—Ä–µ–µ–∑–¥",
    "new_job": "–Ω–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞",
    "birth_child": "—Ä–æ–∂–¥–µ–Ω–∏–µ —Ä–µ–±—ë–Ω–∫–∞",
    "wedding": "—Å–≤–∞–¥—å–±–∞",
    "engagement": "–ø–æ–º–æ–ª–≤–∫–∞",
    "proposal": "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞",
    "wedding_anniversary": "–≥–æ–¥–æ–≤—â–∏–Ω–∞ —Å–≤–∞–¥—å–±—ã",
    "mothers_day": "–¥–µ–Ω—å –º–∞—Ç–µ—Ä–∏",
    "fathers_day": "–¥–µ–Ω—å –æ—Ç—Ü–∞",
    "family_day": "–¥–µ–Ω—å —Å–µ–º—å–∏",
    "valentines_day": "–î–µ–Ω—å —Å–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞",
    "name_day": "–¥–µ–Ω—å –∞–Ω–≥–µ–ª–∞",
    "new_home": "–Ω–æ–≤–æ—Å–µ–ª—å–µ",
}

EMOJI_MAP = {
    "toast_corporate": "ü•Çüçªüë®‚Äçüíºüë©‚Äçüíºüéâ",
    "toast_wedding": "ü•Çüíçüë∞ü§µüíê",
    "toast_new_year": "ü•ÇüçæüéÜüéâ",
    "toast_birthday": "ü•ÇüéÇüéàüéÅ",
    "toast_farewell": "ü•Çüëã‚úàÔ∏èüéâ",
    "toast_cocktail": "ü•Çüç∏üçπ",
    "toast_romantic": "ü•Çüíïüåπ",
    "toast_funny": "ü•ÇüòÇüéâ",
    "birthday": "üéâüéÇüéàüéÅüéä",
    "new_year": "üéÑ‚ùÑÔ∏è‚õÑüéÅ‚ú®",
    "wedding": "üíçüë∞ü§µüíêüíí",
    "wedding_anniversary": "üíçüíïü•Çüéâ",
    "graduation": "üéìüéìüìöüéâ",
    "car_purchase": "üöóüí®üèÅ",
    "apartment_purchase": "üè†üîëüéä",
    "house_purchase": "üè†üè°üéä",
    "victory": "üèÜüéØüéâ",
    "award": "üèÜüèÖüéâ",
    "sports_success": "üèÜ‚öΩüèÄüéæ",
    "recovery": "ü©πüíä‚úÖ",
    "discharge": "üè•‚úÖü©∫",
    "relations_anniversary": "üíïüåπü•Ç",
    "friendship_anniversary": "ü§ùüíïüéâ",
    "move": "üè†üööüì¶",
    "new_job": "üíºüëîüéâ",
    "promotion": "üíºüìàüéâ",
    "retirement": "üéâüèñÔ∏èüë¥üëµ",
    "project_success": "üöÄüéØüéâ",
    "report_submitted": "üìã‚úÖüéâ",
    "vacation_start": "‚úàÔ∏èüèñÔ∏è‚òÄÔ∏è",
    "vacation_end": "üè†üíºüìÖ",
    "valentines_day": "üíïüåπüç´üíù",
    "name_day": "üéÇüéâüéà",
    "new_home": "üè†üéâüéä",
    "mothers_day": "üë©üíêüíï",
    "fathers_day": "üë®üíºüéâ",
    "family_day": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶üíïüéâ",
    "defender_day": "üéñÔ∏èüë®‚Äç‚úàÔ∏èüéâ",
    "womens_day": "üå∑üë©üéâ",
    "teachers_day": "üìöüë©‚Äçüè´üçé",
    "doctors_day": "üè•üë®‚Äç‚öïÔ∏èüíä",
    "programmers_day": "üíª‚å®Ô∏èüë®‚Äçüíª",
    "police_day": "üöîüëÆ‚Äç‚ôÇÔ∏èüéñÔ∏è",
    "prosecutor_day": "‚öñÔ∏èüë®‚Äçüíºüéâ",
    "lawyers_day": "‚öñÔ∏èüë®‚Äçüíºüéâ",
    "company_day": "üè¢üéâüíº",
    "birth_child": "üë∂üçºüíï",
    "engagement": "üíçüíïüë∞ü§µ",
    "proposal": "üíçüíïüåπ",
    "xmas": "üéÑüéÅüéÖ‚ùÑÔ∏è",
    "easter": "üê∞ü•öüå∏‚úùÔ∏è",
    "victory_day": "üéâüéñÔ∏èüá∑üá∫",
    "city_day": "üèôÔ∏èüéäüéâ",
    "independence_day": "üéâüéÜüá∫üá∏",
    "spring_start": "üå∏üåº‚òÄÔ∏è",
    "summer_start": "‚òÄÔ∏èüèñÔ∏èüèä‚Äç‚ôÇÔ∏è",
    "autumn_start": "üçÅüçÉ‚òï",
    "winter_start": "‚ùÑÔ∏è‚õÑüéø",
    "sep_1": "üìöüéíüéì",
    "diploma": "üéìüìúüéâ",
    "default": "üéâ‚ú®üéä"
}

# --- –ù–ê–ß–ê–õ–û: –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ---
REQUEST_LIMIT_PER_MINUTE = 3

def is_rate_limited(user_id):
    now = datetime.now()
    user_requests = request_times.get(user_id, [])
    
    user_requests = [req_time for req_time in user_requests if now - req_time < timedelta(minutes=1)]
    
    if len(user_requests) >= REQUEST_LIMIT_PER_MINUTE:
        time_to_reset = user_requests[0] + timedelta(minutes=1) - now
        return True, time_to_reset
    
    user_requests.append(now)
    request_times[user_id] = user_requests
    return False, None
# --- –ö–û–ù–ï–¶: –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    
    # –ê–ù–ê–õ–ò–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ /start
    log_user(user)
    
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –±—ã—Å—Ç—Ä–æ –∏ –∫—Ä–∞—Å–∏–≤–æ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –∫–æ–≥–æ —É–≥–æ–¥–Ω–æ.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"
    )
    keyboard = [
        [InlineKeyboardButton(text, callback_data=key)] for key, text in MAIN_CATEGORIES.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.edit_message_text(welcome_text, reply_markup=reply_markup)
    
    return CATEGORY

async def choose_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    category_key = query.data

    if category_key == "donate":
        keyboard = [
            [InlineKeyboardButton("‚≠ê 50 Stars", callback_data="donate_50")],
            [InlineKeyboardButton("‚≠ê 100 Stars", callback_data="donate_100")],
            [InlineKeyboardButton("‚≠ê 200 Stars", callback_data="donate_200")],
            [InlineKeyboardButton("‚≠ê 500 Stars", callback_data="donate_500")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_category")],
            [InlineKeyboardButton("üè† –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="restart_bot")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç! üôè\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∫–ª–∞–º—ã –∏ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –ª–∏—á–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.\n"
            "–í–∞—à –≤–∫–ª–∞–¥ –ø–æ–º–æ–∂–µ—Ç –ø–æ–∫—Ä—ã—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥ –∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —á–µ—Ä–µ–∑ Telegram Stars:",
            reply_markup=reply_markup
        )
        return CATEGORY

    if category_key == "feedback":
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_category")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:", reply_markup=reply_markup)
        return FEEDBACK

    context.user_data['main_category'] = category_key

    subcats = SUBCATEGORIES.get(category_key, {})
    if not subcats:
        context.user_data['subcategory_key'] = category_key
        keyboard = [
            [InlineKeyboardButton(text, callback_data=key)] for key, text in STYLES.items()
        ]
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_category")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
        return STYLE

    keyboard = [
        [InlineKeyboardButton(text, callback_data=key)] for key, text in subcats.items()
    ]
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_category")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {MAIN_CATEGORIES[category_key]}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
    return SUBCATEGORY

async def choose_subcategory(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    subcategory_key = query.data
    context.user_data['subcategory_key'] = subcategory_key

    keyboard = [
        [InlineKeyboardButton(text, callback_data=key)] for key, text in STYLES.items()
    ]
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_category")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
    
    return STYLE

async def choose_style(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    style_key = query.data
    context.user_data['style'] = style_key

    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞", callback_data="emojis_yes")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="emojis_no")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_style")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if context.user_data.get('main_category') == 'toast':
        await query.edit_message_text("–î–æ–±–∞–≤–∏—Ç—å —Å–º–∞–π–ª–∏–∫–∏ –≤ —Ç–æ—Å—Ç?", reply_markup=reply_markup)
    else:
        await query.edit_message_text("–î–æ–±–∞–≤–∏—Ç—å —Å–º–∞–π–ª–∏–∫–∏?", reply_markup=reply_markup)
    
    return EMOJIS

async def choose_emojis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    emoji_choice = query.data
    
    if emoji_choice == "emojis_yes":
        context.user_data['emojis'] = True
    elif emoji_choice == "emojis_no":
        context.user_data['emojis'] = False
    else:
        return EMOJIS

    keyboard = [
        [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_name")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_emojis")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–¥–ª—è –∫–æ–ª–ª–µ–≥–∏', '–¥–ª—è –º–∞–º—ã'), –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=reply_markup)
    return NAME

async def back_to_main_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –±—ã—Å—Ç—Ä–æ –∏ –∫—Ä–∞—Å–∏–≤–æ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –∫–æ–≥–æ —É–≥–æ–¥–Ω–æ.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"
    )
    keyboard = [
        [InlineKeyboardButton(text, callback_data=key)] for key, text in MAIN_CATEGORIES.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(welcome_text, reply_markup=reply_markup)
    return CATEGORY

async def back_to_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    category_key = context.user_data.get('main_category')
    if category_key:
        subcats = SUBCATEGORIES.get(category_key, {})
        if subcats:
            keyboard = [
                [InlineKeyboardButton(text, callback_data=key)] for key, text in subcats.items()
            ]
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_category")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {MAIN_CATEGORIES[category_key]}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
            return SUBCATEGORY
        else:
            return await back_to_main_category(update, context)
    else:
        return await back_to_main_category(update, context)

async def back_to_style(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton(text, callback_data=key)] for key, text in STYLES.items()
    ]
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_category")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
    
    return STYLE

async def back_to_emojis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞", callback_data="emojis_yes")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="emojis_no")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_style")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if context.user_data.get('main_category') == 'toast':
        await query.edit_message_text("–î–æ–±–∞–≤–∏—Ç—å —Å–º–∞–π–ª–∏–∫–∏ –≤ —Ç–æ—Å—Ç?", reply_markup=reply_markup)
    else:
        await query.edit_message_text("–î–æ–±–∞–≤–∏—Ç—å —Å–º–∞–π–ª–∏–∫–∏?", reply_markup=reply_markup)
    
    return EMOJIS

async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    name = update.message.text
    context.user_data['name'] = name
    
    sent_message = await update.message.reply_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é... ‚è≥")
    context.user_data['generating_message_id'] = sent_message.message_id
    
    await generate_message(update, context)
    return GENERATE

async def skip_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['name'] = None
    await query.edit_message_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é... ‚è≥")
    await generate_message_callback(update, context)
    return GENERATE

async def generate_message_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await generate_message(query, context)
    return GENERATE

async def generate_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if hasattr(update, 'from_user') and hasattr(update, 'message'):
        user_id = update.from_user.id
        user = update.from_user
        message_obj = update.message
    else:
        user_id = update.effective_user.id
        user = update.effective_user
        message_obj = update.message

    is_limited, reset_time = is_rate_limited(user_id)
    if is_limited:
        if reset_time:
            seconds_left = int(reset_time.total_seconds())
            minutes_left = seconds_left // 60
            seconds_remainder = seconds_left % 60
            
            # –ê–ù–ê–õ–ò–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
            log_rate_limit(user, seconds_left)
            
            if minutes_left > 0:
                await message_obj.reply_text(f"‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {minutes_left} –º–∏–Ω {seconds_remainder} —Å–µ–∫.")
            else:
                await message_obj.reply_text(f"‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {seconds_left} —Å–µ–∫.")
        else:
            await message_obj.reply_text("‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return GENERATE

    subcategory_key = context.user_data.get('subcategory_key')
    name = context.user_data.get('name')
    emojis = context.user_data.get('emojis', False)
    style = context.user_data.get('style', 'standard')

    category_internal = CATEGORY_INTERNAL.get(subcategory_key, "–ø—Ä–∞–∑–¥–Ω–∏–∫")
    style_description = STYLE_DESCRIPTIONS.get(style, "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ")

    emoji_string = EMOJI_MAP.get(subcategory_key, EMOJI_MAP.get(category_internal.split()[0], EMOJI_MAP["default"])) if emojis else ""
    emoji_instruction = f"–†–∞–∑—Ä–µ—à–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Å–º–∞–π–ª–∏–∫–∏: {emoji_string}. –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏ –∏—Ö —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –≤—Å–µ–º —Ç—Ä—ë–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º, –æ—Ç 20 –¥–æ 35 —à—Ç—É–∫ –≤ –∫–∞–∂–¥–æ–º. –°–º–∞–π–ª–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö —Ç–µ–∫—Å—Ç–∞: –≤ –Ω–∞—á–∞–ª–µ, –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ, –≤ –∫–æ–Ω—Ü–µ. –ß–µ—Ä–µ–¥—É–π –∏—Ö —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –±—ã–ª –∂–∏–≤—ã–º –∏ –Ω–µ –æ–¥–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º." if emojis else "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–º–∞–π–ª—ã."

    name_part = f"–ø–æ–∑–¥—Ä–∞–≤—å {name}" if name else "–ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∞"

    if subcategory_key.startswith('toast_'):
        prompt = f"""
–°–æ–∑–¥–∞–π 3 —Ä–∞–∑–Ω—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö {category_internal}, –∫–æ—Ç–æ—Ä—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è.
–°—Ç–∏–ª—å: {style_description}.
{emoji_instruction}
–ê–¥—Ä–µ—Å–∞—Ç: {name_part}.
–Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π.
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –≠—Ç–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å **—Ä–µ–∞–ª—å–Ω—ã–µ**, **—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ** —Ç–æ—Å—Ç—ã, **–Ω–µ –ø—Ä–∏–¥—É–º–∞–Ω–Ω—ã–µ**.
- –°–æ–±–ª—é–¥–∞–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å: {style_description}.
- –ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ —Ñ—Ä–∞–∑ –º–µ–∂–¥—É –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏.
- –ë–µ–∑ –∫–ª–∏—à–µ "–∂–µ–ª–∞—é —Å—á–∞—Å—Ç—å—è, –∑–¥–æ—Ä–æ–≤—å—è".
- –°–æ—Ö—Ä–∞–Ω–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∏—Ç–º —Ä–µ—á–∏.
- –ò–∑–±–µ–≥–∞–π –¥–ª–∏–Ω–Ω—ã—Ö —Ç–∏—Ä–µ (‚Äî), –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ (-) –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–±–µ–ª.
- –ü–∏—à–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞ ("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é", "–û—Ç –≤—Å–µ–π –¥—É—à–∏", "–° —Ç–µ–ø–ª–æ–º –≤ —Å–µ—Ä–¥—Ü–µ").
- –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "ChatGPT", "OpenAI" –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è.
- –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ –≤–∏–¥–µ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
"""
        system_prompt = f"–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ—Ä —Ç–æ—Å—Ç–æ–≤. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Å—Ç–∏–ª–µ: {style_description}. –í–æ–∑–≤—Ä–∞—â–∞–π 3 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö, —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ—Å—Ç–∞ –≤ –≤–∏–¥–µ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–∏—Ä–µ (-). –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Å–º–∞–π–ª–∏–∫–∏, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏ –∏—Ö —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –≤—Å–µ–º —Ç—Ä—ë–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º, –æ—Ç 20 –¥–æ 35 —à—Ç—É–∫ –≤ –∫–∞–∂–¥–æ–º, —Ä–∞–∑–º–µ—â–∞—è –∏—Ö –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç—è—Ö —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è."
    else:
        prompt = f"""
–°–æ–∑–¥–∞–π 3 —Ä–∞–∑–Ω—ã—Ö {category_internal} –≤ –ø—Ä–æ–∑–µ –∏–ª–∏ —Å—Ç–∏—Ö–µ.
–°—Ç–∏–ª—å: {style_description}.
{emoji_instruction}
–ê–¥—Ä–µ—Å–∞—Ç: {name_part}.
–Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π.
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –°–æ–±–ª—é–¥–∞–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å: {style_description}.
- –ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ —Ñ—Ä–∞–∑ –º–µ–∂–¥—É –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏.
- –ë–µ–∑ –∫–ª–∏—à–µ "–∂–µ–ª–∞—é —Å—á–∞—Å—Ç—å—è, –∑–¥–æ—Ä–æ–≤—å—è".
- –°–æ—Ö—Ä–∞–Ω–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∏—Ç–º —Ä–µ—á–∏.
- –ò–∑–±–µ–≥–∞–π –¥–ª–∏–Ω–Ω—ã—Ö —Ç–∏—Ä–µ (‚Äî), –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ (-) –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–±–µ–ª.
- –ü–∏—à–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞ ("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é", "–û—Ç –≤—Å–µ–π –¥—É—à–∏", "–° —Ç–µ–ø–ª–æ–º –≤ —Å–µ—Ä–¥—Ü–µ").
- –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "ChatGPT", "OpenAI" –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è.
- –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ –≤–∏–¥–µ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
"""
        system_prompt = f"–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ—Ä –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –∏ —Ç–æ—Å—Ç–æ–≤. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Å—Ç–∏–ª–µ: {style_description}. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏ –ø–æ–¥—Ä—è–¥ (–º–∞–∫—Å. 1), –∏–∑–±–µ–≥–∞–π —à–∞–±–ª–æ–Ω–æ–≤ '–∂–µ–ª–∞—é —Å—á–∞—Å—Ç—å—è, –∑–¥–æ—Ä–æ–≤—å—è'. –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ –≤–∏–¥–µ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–∏—Ä–µ (-). –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Å–º–∞–π–ª–∏–∫–∏, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏ –∏—Ö —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –≤—Å–µ–º —Ç—Ä—ë–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º, –æ—Ç 20 –¥–æ 35 —à—Ç—É–∫ –≤ –∫–∞–∂–¥–æ–º, —Ä–∞–∑–º–µ—â–∞—è –∏—Ö –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç—è—Ö —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è."

    generation_success = False
    try:
        client = openai.AsyncOpenAI(api_key=OPENAI_API_KEY)
        response = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt}
            ],
            max_tokens=2500,
            temperature=0.8
        )

        message_text = response.choices[0].message.content
        parts = message_text.split("\n\n")
        for part in parts:
            if part.strip():
                clean_part = part.strip()
                if clean_part.startswith(("1.", "2.", "3.", "1)", "2)", "3)")):
                    clean_part = clean_part[2:].strip()
                if clean_part:
                    await message_obj.reply_text(clean_part)
        
        generation_success = True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await message_obj.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    
    # –ê–ù–ê–õ–ò–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    log_generation(
        user=user,
        category=context.user_data.get('main_category', 'unknown'),
        subcategory=subcategory_key,
        style=style,
        emojis=emojis,
        name_provided=bool(name),
        success=generation_success
    )

    keyboard = [
        [InlineKeyboardButton("üîÑ –ï—â—ë –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data="generate_again")],
        [InlineKeyboardButton("üè† –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="restart_bot")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await message_obj.reply_text("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=reply_markup)
    
    return GENERATE

async def generate_again(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–µ... ‚è≥")
    await generate_message(query, context)
    return GENERATE

async def restart_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    context.user_data.clear()
    
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –±—ã—Å—Ç—Ä–æ –∏ –∫—Ä–∞—Å–∏–≤–æ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –∫–æ–≥–æ —É–≥–æ–¥–Ω–æ.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"
    )
    keyboard = [
        [InlineKeyboardButton(text, callback_data=key)] for key, text in MAIN_CATEGORIES.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(welcome_text, reply_markup=reply_markup)
    return CATEGORY

async def handle_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    feedback_text = update.message.text
    user = update.effective_user
    
    # –ê–ù–ê–õ–ò–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    log_feedback(user, feedback_text)
    
    logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç {user.id} (@{user.username}): {feedback_text}")

    admin_id = os.getenv("ADMIN_TELEGRAM_ID")
    
    if admin_id:
        try:
            await context.bot.send_message(
                chat_id=int(admin_id), 
                text=f"üì© **–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å**\n\n"
                     f"–û—Ç: @{user.username if user.username else '–±–µ–∑ username'}\n"
                     f"ID: `{user.id}`\n"
                     f"–ò–º—è: {user.first_name} {user.last_name if user.last_name else ''}\n\n"
                     f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{feedback_text}",
                parse_mode="Markdown"
            )
            await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã –µ–≥–æ –ø–æ–ª—É—á–∏–ª–∏. ‚úÖ")
            logger.info(f"‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É {admin_id}")
        except ValueError as ve:
            logger.error(f"‚ùå ADMIN_TELEGRAM_ID –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {admin_id}. –û—à–∏–±–∫–∞: {ve}")
            await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! ‚úÖ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∞–¥–º–∏–Ω—É: {e}")
            await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! ‚úÖ")
    else:
        logger.warning(f"‚ö†Ô∏è ADMIN_TELEGRAM_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {feedback_text}")
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã –µ–≥–æ –ø–æ–ª—É—á–∏–ª–∏. ‚úÖ")

    keyboard = [[InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main_category")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–•–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é?", reply_markup=reply_markup)
    
    return CATEGORY

# --- –ù–ê–ß–ê–õ–û: –î–æ–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Stars ---
async def handle_donate_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    amount_map = {
        "donate_50": 50,
        "donate_100": 100,
        "donate_200": 200,
        "donate_500": 500,
    }
    
    stars_amount = amount_map.get(query.data, 50)
    
    try:
        await context.bot.send_invoice(
            chat_id=query.from_user.id,
            title=f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞",
            description=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É! –í—ã –ø–æ–º–æ–≥–∞–µ—Ç–µ —Ä–∞–∑–≤–∏—Ç–∏—é –±–æ—Ç–∞.",
            payload=f"donate_{stars_amount}_stars",
            provider_token="",
            currency="XTR",
            prices=[LabeledPrice("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞", stars_amount)],
        )
        await query.edit_message_text(
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—á—ë—Ç –Ω–∞ {stars_amount} ‚≠ê Stars.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–≤–æ–π—Å–æ–º –≤—ã—à–µ. üëÜ"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω–≤–æ–π—Å–∞: {e}")
        await query.edit_message_text(
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —á–µ—Ä–µ–∑ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å."
        )

async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)

async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    payment = update.message.successful_payment
    
    # –ê–ù–ê–õ–ò–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–Ω–∞—Ç
    log_donation(user, payment.total_amount, payment.invoice_payload)
    
    logger.info(f"üí∞ Donation received from {user.id} (@{user.username}): {payment.total_amount} Stars")
    
    admin_id = os.getenv("ADMIN_TELEGRAM_ID")
    if admin_id:
        try:
            await context.bot.send_message(
                chat_id=int(admin_id),
                text=f"üí∞ –ü–æ–ª—É—á–µ–Ω –¥–æ–Ω–∞—Ç!\n"
                     f"–û—Ç: @{user.username} (ID: {user.id})\n"
                     f"–°—É–º–º–∞: {payment.total_amount} ‚≠ê Stars\n"
                     f"Payload: {payment.invoice_payload}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞ –æ –¥–æ–Ω–∞—Ç–µ: {e}")
    
    await update.message.reply_text(
        "üéâ –û–≥—Ä–æ–º–Ω–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n\n"
        "–í–∞—à –≤–∫–ª–∞–¥ –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞. ‚ù§Ô∏è\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–¥–µ–∏ –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è ‚Äî –ø–∏—à–∏—Ç–µ –≤ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!"
    )
# --- –ö–û–ù–ï–¶: –î–æ–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Stars ---

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(f"Exception while handling an update: {context.error}")
    
    if isinstance(context.error, Conflict):
        logger.critical("‚ö†Ô∏è CONFLICT ERROR: –ó–∞–ø—É—â–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞! –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã.")

def main():
    global GOOGLE_SHEET, GOOGLE_SHEET_ID
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
    GOOGLE_SHEET, GOOGLE_SHEET_ID = init_google_sheets()
    
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CATEGORY: [
                CallbackQueryHandler(back_to_main_category, pattern="^back_to_main_category$"),
                CallbackQueryHandler(restart_bot, pattern="^restart_bot$"),
                CallbackQueryHandler(handle_donate_amount, pattern="^donate_(50|100|200|500)$"),
                CallbackQueryHandler(choose_category),
            ],
            SUBCATEGORY: [
                CallbackQueryHandler(back_to_main_category, pattern="^back_to_main_category$"),
                CallbackQueryHandler(choose_subcategory),
            ],
            STYLE: [
                CallbackQueryHandler(back_to_category, pattern="^back_to_category$"),
                CallbackQueryHandler(back_to_main_category, pattern="^back_to_main_category$"),
                CallbackQueryHandler(choose_style),
            ],
            EMOJIS: [
                CallbackQueryHandler(back_to_style, pattern="^back_to_style$"),
                CallbackQueryHandler(back_to_category, pattern="^back_to_category$"),
                CallbackQueryHandler(back_to_main_category, pattern="^back_to_main_category$"),
                CallbackQueryHandler(choose_emojis),
            ],
            NAME: [
                CallbackQueryHandler(skip_name, pattern="^skip_name$"),
                CallbackQueryHandler(back_to_emojis, pattern="^back_to_emojis$"),
                CallbackQueryHandler(back_to_style, pattern="^back_to_style$"),
                CallbackQueryHandler(back_to_category, pattern="^back_to_category$"),
                CallbackQueryHandler(back_to_main_category, pattern="^back_to_main_category$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_name),
            ],
            GENERATE: [
                CallbackQueryHandler(generate_again, pattern="^generate_again$"),
                CallbackQueryHandler(restart_bot, pattern="^restart_bot$"),
                CallbackQueryHandler(back_to_main_category, pattern="^back_to_main_category$"),
            ],
            FEEDBACK: [
                CallbackQueryHandler(back_to_main_category, pattern="^back_to_main_category$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_feedback),
            ],
        },
        fallbacks=[CommandHandler('start', start)]
    )

    application.add_handler(conv_handler)
    application.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))
    application.add_error_handler(error_handler)

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info(f"üí∞ –î–æ–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Stars: –í–ö–õ–Æ–ß–ï–ù–´")
    logger.info(f"üìä Google Sheets: {'–í–ö–õ–Æ–ß–ï–ù–´' if GOOGLE_SHEET else '–û–¢–ö–õ–Æ–ß–ï–ù–´'}")
    admin_id_status = os.getenv('ADMIN_TELEGRAM_ID', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù')
    logger.info(f"üìß Admin ID: {admin_id_status}")
    
    if admin_id_status == '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù':
        logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: ADMIN_TELEGRAM_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è.")
    
    application.run_polling()

if __name__ == '__main__':
    main()
